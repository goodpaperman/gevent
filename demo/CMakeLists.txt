cmake_minimum_required(VERSION 3.0)
project(epoll_svc)
include_directories(../core ../ext ../include ../third-party/jsoncpp/include)
IF (NOT WIN32)
set(CMAKE_CXX_FLAGS "-std=c++11 -pthread -g -Wall ${CMAKE_CXX_FLAGS}")
ENDIF ()
link_directories(${PROJECT_SOURCE_DIR}/../lib)
# -lrt for timer support
#link_libraries(jsoncpp)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/../bin)

#add_definitions(-D GEVENT_DUMP)
add_executable (epoll_svc epoll_svc.cpp svc_handler.cpp ../core/EventBase.cpp ../core/EventHandler.cpp ../ext/JsonEventHandler.cpp ../core/log.cpp ../third-party/jsoncpp/json_reader.cpp  ../third-party/jsoncpp/json_value.cpp  ../third-party/jsoncpp/json_writer.cpp)
#target_compile_definitions(epoll_svc PUBLIC)
IF (WIN32)
target_link_libraries(epoll_svc ws2_32)
ELSE ()
target_link_libraries(epoll_svc rt)
ENDIF ()

# may pollute epoll_svc target, using target_compile_definitions
#add_definitions(-D TEST_TIMER)
add_executable (epoll_clt epoll_clt.cpp clt_handler.cpp ../core/EventBase.cpp ../core/EventBaseAR.cpp ../core/EventHandler.cpp ../ext/JsonEventHandler.cpp ../core/log.cpp ../third-party/jsoncpp/json_reader.cpp  ../third-party/jsoncpp/json_value.cpp  ../third-party/jsoncpp/json_writer.cpp)
target_compile_definitions(epoll_clt PUBLIC -D TEST_READ)
IF (WIN32)
target_link_libraries(epoll_clt ws2_32)
ELSE ()
target_link_libraries(epoll_clt rt)
ENDIF ()

add_executable (epoll_local epoll_local.cpp ../third-party/jsoncpp/json_reader.cpp  ../third-party/jsoncpp/json_value.cpp  ../third-party/jsoncpp/json_writer.cpp)
#target_compile_definitions(epoll_local PUBLIC -D TEST_READ)
IF (WIN32)
target_link_libraries(epoll_local ws2_32)
ELSE ()
target_link_libraries(epoll_local rt)
ENDIF ()
